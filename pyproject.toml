[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "starlette-admin-fields"
dynamic = ["version"]
description = 'Extra fields to use with Starlette Admin'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [{ name = "Hasan Sezer Taşan", email = "hasansezertasan@gmail.com" }]
maintainers = [
  { name = "Hasan Sezer Taşan", email = "hasansezertasan@gmail.com" },
]
keywords = [
  "jinja2",
  "template",
  "starlette",
  "fastapi",
  "admin",
  "dashboard",
  "starlette-admin",
  "fields",
  "ckeditor4",
  "ckeditor5",
  "simplemde",
  "bootstrap-show-password",
]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Development Status :: 4 - Beta",
  'Environment :: Web Environment',
  "Topic :: Internet",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Typing :: Typed",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Framework :: FastAPI",
]
dependencies = ["starlette-admin"]


[project.urls]
"Homepage" = "https://github.com/hasansezertasan/starlette-admin-fields"
"Documentation" = "https://github.com/hasansezertasan/starlette-admin-fields#readme"
"Source" = "https://github.com/hasansezertasan/starlette-admin-fields"
"Changelog" = "https://hasansezertasan.github.io/starlette-admin-fields/changelog"
"Issues" = "https://github.com/hasansezertasan/starlette-admin-fields/issues"


[tool.hatch.envs.default]
dependencies = [
  "pytest>=7.2.0, <8.2.0",
  "coverage[toml]>=7.0.0, <7.4.0",
  "pre-commit>=2.20.0, <4.0.0",
  "uvicorn>=0.20.0, <0.28.0",
  "httpx>=0.23.3, <0.27.0",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "coverage combine",
  "coverage report --show-missing",
  "coverage xml",
]
cov = ["test-cov", "cov-report"]
pre = "pre-commit run --all-files --hook-stage manual --show-diff-on-failure"

[tool.hatch.envs.types]
dependencies = ["mypy==1.8.0", "ruff==0.4.2"]
[tool.hatch.envs.types.scripts]
typing = "mypy --install-types --non-interactive starlette_admin_fields"
style = "ruff check starlette_admin_fields tests"
format = "ruff format starlette_admin_fields tests"
all = ["typing", "style", "format"]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs>=1.4.2, <2.0.0",
  "mkdocs-material>=9.0.0, <10.0.0",
  "mkdocstrings[python]>=0.19.0, <0.25.0",
  "mkdocs-static-i18n>=0.53.0, <0.57.0",
]
[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve -a localhost:8080"
build = "mkdocs build"
deploy = "mkdocs gh-deploy --force"

[tool.hatch.version]
path = "starlette_admin_fields/__about__.py"

[tool.coverage.report]
fail_under = 99
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
  "except NotImplementedError",
  "except ImportError",
]

[tool.coverage.run]
branch = true
parallel = true
source = ["starlette_admin_fields", "tests"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
  "alembic",
  "migrations",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

# Extra
show-fixes = true
extend-include = ["*.ipynb"]
fix = true

[tool.ruff.lint]
# Run `ruff linter` command to see all available linters and their descriptions
select = [
  "F",   # Pyflakes
  "E",   # pycodestyle errors
  "E4",
  "E7",
  "E9",
  "W",   # pycodestyle warnings
  "C90", # mccabe
  "I",   # isort
  "N",   # pep8-naming
  # "D", # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ANN",   # flake8-annotations
  "ASYNC", # flake8-async
  "TRIO",  # flake8-trio
  "S",     # flake8-bandit
  "BLE",   # flake8-blind-except
  "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  "B9",
  "A",     # flake8-builtins
  # "COM", # flake8-commas
  # "CPY", # flake8-copyright
  "C",   # flake8-comprehensions
  "C4",  # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  "DJ",  # flake8-django
  "EM",  # flake8-errmsg
  "EXE", # flake8-executable
  # "FA", # flake8-future-annotations
  # "ISC", # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "G",    # flake8-logging-format
  "INP",  # flake8-no-pep420
  "PIE",  # flake8-pie
  "T20",  # flake8-print
  "PYI",  # flake8-pyi
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TCH",  # flake8-type-checking
  "INT",  # flake8-gettext
  # "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "TD",  # flake8-todos
  "FIX", # flake8-fixme
  "ERA", # eradicate
  "PD",  # pandas-vet
  # "PGH", # pygrep-hooks
  # "PL",   # Pylint
  "PLC",  # pylint - convention
  "PLE",  # pylint - error
  "PLW",  # pylint - warning
  "TRY",  # tryceratops
  "FLY",  # flynt
  "NPY",  # NumPy-specific rules
  "AIR",  # Airflow
  "PERF", # Perflint
  "FURB", # refurb
  "LOG",  # flake8-logging
  "RUF",  # Ruff-specific rules
]
ignore = [
  "A002", # Argument `id` is shadowing a Python builtin
  "B008", # do not perform function calls in argument defaults
  # "C901", # too complex
  "E501", # line too long, handled by black
  "F401", # imported but unused
  # "E402", # module level import not at top of file
  "E712", # comparison to True should be 'if cond is True:' or 'if cond:'
  "F821", # undefined name
  # "W191", # indentation contains tabs
  # "E101", # indentation contains mixed spaces and tabs
  # "C408", # Unnecessary list comprehension - rewrite as a for loop
  "UP007", # Use `X | Y` for type annotations
  "UP006", # Use `list` instead of `List` for type annotation
  "G201",  # Logging `.exception(...)` should be used instead of `.error(..., exc_info=True)`
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Extra
preview = true
ignore-init-module-imports = true

[tool.ruff.lint.flake8-copyright]
author = "Hasan Sezer Taşan <hasansezertasan@gmail.com>"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-third-party = ["starlette_admin_fields"]


[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "PLC0414"]
"example/**" = ["N805", "N999", "RUF012"]
"tests/**" = ["RUF012"]


[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
implicit_reexport = false
strict_equality = true
ignore_missing_imports = true

[tool.hatch.build.targets.wheel]
[tool.hatch.build.targets.sdist]
include = ["starlette_admin_fields"]
