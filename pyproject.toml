[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "starlette-admin-fields"
dynamic = ["version"]
description = 'Extra fields to use with Starlette Admin'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
# TODO: Update keywords
keywords = [
  "jinja2",
  "template",
  "starlette",
  "fastapi",
  "admin",
  "dashboard",
  "starlette-admin",
  "fields",
  "ckeditor4",
  "ckeditor5",
  "simplemde",
]
authors = [{ name = "Hasan Sezer Taşan", email = "hasansezertasan@gmail.com" }]
maintainers = [
  { name = "Hasan Sezer Taşan", email = "hasansezertasan@gmail.com" },
]
# TODO: Update classifiers
classifiers = [
  "Development Status :: 4 - Beta",
  "Topic :: Internet",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Operating System :: OS Independent",
  "Typing :: Typed",
  'Environment :: Web Environment',
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Framework :: FastAPI",
]
dependencies = ["starlette-admin"]

[project.urls]
Homepage = "https://github.com/hasansezertasan/starlette-admin-fields"
Documentation = "https://github.com/hasansezertasan/starlette-admin-fields#readme"
Source = "https://github.com/hasansezertasan/starlette-admin-fields"
Changelog = "https://hasansezertasan.github.io/starlette-admin-fields/changelog"
Issues = "https://github.com/hasansezertasan/starlette-admin-fields/issues"

[project.optional-dependencies]
test = [
  "pytest >=7.2.0, <7.5.0",
  "mypy ==1.8.0",
  "ruff ==0.1.15",
  "black ==24.1.1",
  "httpx >=0.23.3, <0.27.0",
]
cov = ["coverage[toml] >=7.0.0, <7.4.0"]
doc = [
  "mkdocs >=1.4.2, <2.0.0",
  "mkdocs-material >=9.0.0, <10.0.0",
  "mkdocstrings[python] >=0.19.0, <0.25.0",
  "mkdocs-static-i18n >=0.53.0, <0.57.0",
]
dev = ["pre-commit >=2.20.0, <4.0.0", "uvicorn >=0.20.0, <0.26.0"]

[tool.hatch.envs.default]
features = ["test", "cov", "doc", "dev"]
[tool.hatch.envs.default.scripts]
format = ["ruff starlette_admin_fields tests --fix", "black ."]

[tool.hatch.envs.test]
features = ["test", "cov"]
[tool.hatch.envs.test.scripts]
lint = [
  "mypy starlette_admin_fields",
  "ruff starlette_admin_fields tests",
  "black . --check",
]
all = "coverage run -m pytest tests"


[tool.hatch.envs.cov]
features = ["cov"]
[tool.hatch.envs.cov.scripts]
report = ["coverage combine", "coverage report --show-missing", "coverage xml"]

[tool.hatch.envs.docs]
features = ["doc"]
[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve -a localhost:8080"
build = "mkdocs build"
deploy = "mkdocs gh-deploy --force"

[tool.hatch.version]
path = "starlette_admin_fields/__about__.py"

[tool.coverage.report]
fail_under = 99
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
  "except NotImplementedError",
  "except ImportError",
]

[tool.coverage.run]
branch = true
parallel = true
source = ["starlette_admin_fields", "tests"]

[tool.ruff]
target-version = "py38"
select = [
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "C90", # mccabe
  "E",   # pycodestyle errors
  "ERA", # eradicate
  "F",   # pyflakes
  "I",   # isort
  "INT", # flake8-gettext
  "N",   # pep8-naming
  "PIE", # flake8-pie,
  "PLC", # pylint - convention
  "PLE", # pylint - error
  "PLW", # pylint - warning
  "Q",   # flake8-quotes
  "RET", # flake8-return,
  "RUF", # Ruff-specific rules
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "UP",  # pyupgrade
  "W",   # pycodestyle warnings
]
ignore = [
  "B008", # Do not perform function call `_` in argument defaults, neccessary for lazy_gettext
  "B905", # `zip()` without an explicit `strict=` parameter
  "E501", # line too long, handled by black
  "N818", # Exception {name} should be named with an Error suffix
]

[tool.ruff.isort]
known-third-party = ["starlette_admin_fields"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "PLC0414"]
"example/**" = ["N805", "N999", "RUF012"]
"tests/**" = ["RUF012"]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
implicit_reexport = false
strict_equality = true
ignore_missing_imports = true

[tool.hatch.build.targets.wheel]
[tool.hatch.build.targets.sdist]
include = ["starlette_admin_fields"]
